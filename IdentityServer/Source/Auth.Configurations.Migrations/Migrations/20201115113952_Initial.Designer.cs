// <auto-generated />
using System;
using Auth.Configurations.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

namespace Auth.Configurations.Migrations.Migrations
{
    [DbContext(typeof(ConfigurationContext))]
    [Migration("20201115113952_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("AllowedAccessTokenSigningAlgorithms")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ALLOWED_ACCESS_TOKEN_SIGNING_ALGORITHMS");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DISPLAY_NAME");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLED");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2")
                        .HasColumnName("LAST_ACCESSED");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("NAME");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("bit")
                        .HasColumnName("NON_EDITABLE");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("bit")
                        .HasColumnName("SHOW_IN_DISCOVERY_DOCUMENT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("API_RESOURCES");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("int")
                        .HasColumnName("API_RESOURCE_ID");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("TYPE");

                    b.HasKey("Id");

                    b.HasIndex("ApiResourceId");

                    b.ToTable("API_RESOURCE_CLAIMS");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("int")
                        .HasColumnName("API_RESOURCE_ID");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("KEY");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("VALUE");

                    b.HasKey("Id");

                    b.HasIndex("ApiResourceId");

                    b.ToTable("API_RESOURCE_PROPERTIES");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("int")
                        .HasColumnName("API_RESOURCE_ID");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("SCOPE");

                    b.HasKey("Id");

                    b.HasIndex("ApiResourceId");

                    b.ToTable("API_RESOURCE_SCOPES");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("int")
                        .HasColumnName("API_RESOURCE_ID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2")
                        .HasColumnName("EXPIRATION");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("TYPE");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("VALUE");

                    b.HasKey("Id");

                    b.HasIndex("ApiResourceId")
                        .IsUnique();

                    b.ToTable("API_RESOURCE_SECRETS");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DISPLAY_NAME");

                    b.Property<bool>("Emphasize")
                        .HasColumnType("bit")
                        .HasColumnName("EMPHASIZE");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLED");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("NAME");

                    b.Property<bool>("Required")
                        .HasColumnType("bit")
                        .HasColumnName("REQUIRED");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("bit")
                        .HasColumnName("SHOW_IN_DISCOVERY_DOCUMENT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("API_SCOPES");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScopeClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("ScopeId")
                        .HasColumnType("int")
                        .HasColumnName("SCOPE_ID");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("TYPE");

                    b.HasKey("Id");

                    b.HasIndex("ScopeId");

                    b.ToTable("API_SCOPE_CLAIMS");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScopeProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("KEY");

                    b.Property<int>("ScopeId")
                        .HasColumnType("int")
                        .HasColumnName("SCOPE_ID");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("VALUE");

                    b.HasKey("Id");

                    b.HasIndex("ScopeId");

                    b.ToTable("API_SCOPE_PROPERTIES");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("AbsoluteRefreshTokenLifetime")
                        .HasColumnType("int")
                        .HasColumnName("ABSOLUTE_REFRESH_TOKEN_LIFETIME");

                    b.Property<int>("AccessTokenLifetime")
                        .HasColumnType("int")
                        .HasColumnName("ACCESS_TOKEN_LIFETIME");

                    b.Property<int>("AccessTokenType")
                        .HasColumnType("int")
                        .HasColumnName("AccessTokenType");

                    b.Property<bool>("AllowAccessTokensViaBrowser")
                        .HasColumnType("bit")
                        .HasColumnName("ALLOW_ACCESS_TOKENS_VIA_BROWSER");

                    b.Property<bool>("AllowOfflineAccess")
                        .HasColumnType("bit")
                        .HasColumnName("ALLOW_OFFLINE_ACCESS");

                    b.Property<bool>("AllowPlainTextPkce")
                        .HasColumnType("bit")
                        .HasColumnName("ALLOW_PLAIN_TEXT_PKCE");

                    b.Property<bool>("AllowRememberConsent")
                        .HasColumnType("bit")
                        .HasColumnName("ALLOW_REMEMBER_CONSENT");

                    b.Property<string>("AllowedIdentityTokenSigningAlgorithms")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ALLOWED_IDENTITY_TOKEN_SIGNING_ALGORITHMS");

                    b.Property<bool>("AlwaysIncludeUserClaimsInIdToken")
                        .HasColumnType("bit")
                        .HasColumnName("ALWAYS_INCLUDE_USER_CLAIMS_IN_ID_TOKEN");

                    b.Property<bool>("AlwaysSendClientClaims")
                        .HasColumnType("bit")
                        .HasColumnName("ALWAYS_SEND_CLIENT_CLAIMS");

                    b.Property<int>("AuthorizationCodeLifetime")
                        .HasColumnType("int")
                        .HasColumnName("AUTHORIZATION_CODE_LIFETIME");

                    b.Property<bool>("BackChannelLogoutSessionRequired")
                        .HasColumnType("bit")
                        .HasColumnName("BACK_CHANNEL_LOGOUT_SESSION_REQUIRED");

                    b.Property<string>("BackChannelLogoutUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("BACK_CHANNEL_LOGOUT_URI");

                    b.Property<string>("ClientClaimsPrefix")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("CLIENT_CLAIMS_PREFIX");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("CLIENT_ID");

                    b.Property<string>("ClientName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("CLIENT_NAME");

                    b.Property<string>("ClientUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("CLIENT_URI");

                    b.Property<int?>("ConsentLifetime")
                        .HasColumnType("int")
                        .HasColumnName("CONSENT_LIFETIME");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<int>("DeviceCodeLifetime")
                        .HasColumnType("int")
                        .HasColumnName("DEVICE_CODE_LIFETIME");

                    b.Property<bool>("EnableLocalLogin")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLE_LOCAL_LOGIN");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLED");

                    b.Property<bool>("FrontChannelLogoutSessionRequired")
                        .HasColumnType("bit")
                        .HasColumnName("FRONT_CHANNEL_LOGOUT_SESSION_REQUIRED");

                    b.Property<string>("FrontChannelLogoutUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("FRONT_CHANNEL_LOGOUT_URI");

                    b.Property<int>("IdentityTokenLifetime")
                        .HasColumnType("int")
                        .HasColumnName("IDENTITY_TOKEN_LIFETIME");

                    b.Property<bool>("IncludeJwtId")
                        .HasColumnType("bit")
                        .HasColumnName("INCLUDE_JWT_ID");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2")
                        .HasColumnName("LAST_ACCESSED");

                    b.Property<string>("LogoUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("LOGO_URI");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("bit")
                        .HasColumnName("NON_EDITABLE");

                    b.Property<string>("PairWiseSubjectSalt")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("PAIR_WISE_SUBJECT_SALT");

                    b.Property<string>("ProtocolType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("PROTOCOL_TYPE");

                    b.Property<int>("RefreshTokenExpiration")
                        .HasColumnType("int")
                        .HasColumnName("REFRESH_TOKEN_EXPIRATION");

                    b.Property<int>("RefreshTokenUsage")
                        .HasColumnType("int")
                        .HasColumnName("REFRESH_TOKEN_USAGE");

                    b.Property<bool>("RequireClientSecret")
                        .HasColumnType("bit")
                        .HasColumnName("REQUIRE_CLIENT_SECRET");

                    b.Property<bool>("RequireConsent")
                        .HasColumnType("bit")
                        .HasColumnName("REQUIRE_CONSENT");

                    b.Property<bool>("RequirePkce")
                        .HasColumnType("bit")
                        .HasColumnName("REQUIRE_PKCE");

                    b.Property<bool>("RequireRequestObject")
                        .HasColumnType("bit")
                        .HasColumnName("REQUIRE_REQUEST_OBJECT");

                    b.Property<int>("SlidingRefreshTokenLifetime")
                        .HasColumnType("int")
                        .HasColumnName("SLIDING_REFRESH_TOKEN_LIFETIME");

                    b.Property<bool>("UpdateAccessTokenClaimsOnRefresh")
                        .HasColumnType("bit")
                        .HasColumnName("UPDATE_ACCESS_TOKEN_CLAIMS_ON_REFRESH");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED");

                    b.Property<string>("UserCodeType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("USER_CODE_TYPE");

                    b.Property<int?>("UserSsoLifetime")
                        .HasColumnType("int")
                        .HasColumnName("USER_SSO_LIFETIME");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("CLIENTS");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("CLIENT_ID");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("TYPE");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("VALUE");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("CLIENT_CLAIMS");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientCorsOrigin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("CLIENT_ID");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("ORIGIN");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("CLIENT_CORS_ORIGINS");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientGrantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("CLIENT_ID");

                    b.Property<string>("GrantType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("GRANT_TYPE");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("CLIENT_GRANT_TYPES");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientIdPRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("CLIENT_ID");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("PROVIDER");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("CLIENT_ID_PRESTRICTIONS");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientPostLogoutRedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("CLIENT_ID");

                    b.Property<string>("PostLogoutRedirectUri")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("POST_LOGOUT_REDIRECT_URI");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("CLIENT_POST_LOGOUT_REDIRECT_URIS");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("CLIENT_ID");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("KEY");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("VALUE");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("CLIENT_PROPERTIES");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientRedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("CLIENT_ID");

                    b.Property<string>("RedirectUri")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("REDIRECT_URI");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("CLIENT_REDIRECT_URIS");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("CLIENT_ID");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("SCOPE");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("CLIENT_SCOPES");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("CLIENT_ID");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2")
                        .HasColumnName("EXPIRATION");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("TYPE");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("VALUE");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("CLIENT_SECRETS");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATED");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DISPLAY_NAME");

                    b.Property<bool>("Emphasize")
                        .HasColumnType("bit")
                        .HasColumnName("EMPHASIZE");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("ENABLED");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("NAME");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("bit")
                        .HasColumnName("NON_EDITABLE");

                    b.Property<bool>("Required")
                        .HasColumnType("bit")
                        .HasColumnName("REQUIRED");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("bit")
                        .HasColumnName("SHOW_IN_DISCOVERY_DOCUMENT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATED");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("IDENTITY_RESOURCES");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResourceClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdentityResourceId")
                        .HasColumnType("int")
                        .HasColumnName("IDENTITY_RESOURCE_ID");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("TYPE");

                    b.HasKey("Id");

                    b.HasIndex("IdentityResourceId");

                    b.ToTable("IDENTITY_RESOURCE_CLAIMS");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResourceProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("IdentityResourceId")
                        .HasColumnType("int")
                        .HasColumnName("IDENTITY_RESOURCE_ID");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("KEY");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("VALUE");

                    b.HasKey("Id");

                    b.HasIndex("IdentityResourceId");

                    b.ToTable("IDENTITY_RESOURCE_PROPERTIES");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceClaim", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiResource", "ApiResource")
                        .WithMany("UserClaims")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceProperty", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiResource", "ApiResource")
                        .WithMany("Properties")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceScope", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiResource", "ApiResource")
                        .WithMany("Scopes")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceSecret", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiResource", "ApiResource")
                        .WithMany("Secrets")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScopeClaim", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiScope", "Scope")
                        .WithMany("UserClaims")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScopeProperty", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiScope", "Scope")
                        .WithMany("Properties")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientClaim", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("Claims")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientCorsOrigin", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("AllowedCorsOrigins")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientGrantType", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("AllowedGrantTypes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientIdPRestriction", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("IdentityProviderRestrictions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientPostLogoutRedirectUri", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("PostLogoutRedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientProperty", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("Properties")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientRedirectUri", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("RedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientScope", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("AllowedScopes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientSecret", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("ClientSecrets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResourceClaim", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.IdentityResource", "IdentityResource")
                        .WithMany("UserClaims")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityResource");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResourceProperty", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.IdentityResource", "IdentityResource")
                        .WithMany("Properties")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityResource");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResource", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("Scopes");

                    b.Navigation("Secrets");

                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScope", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.Client", b =>
                {
                    b.Navigation("AllowedCorsOrigins");

                    b.Navigation("AllowedGrantTypes");

                    b.Navigation("AllowedScopes");

                    b.Navigation("Claims");

                    b.Navigation("ClientSecrets");

                    b.Navigation("IdentityProviderRestrictions");

                    b.Navigation("PostLogoutRedirectUris");

                    b.Navigation("Properties");

                    b.Navigation("RedirectUris");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResource", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("UserClaims");
                });
#pragma warning restore 612, 618
        }
    }
}